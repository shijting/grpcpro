// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pgfiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProdServerClient is the client API for ProdServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProdServerClient interface {
	GetProd(ctx context.Context, in *ProdRequest, opts ...grpc.CallOption) (*ProdResponse, error)
}

type prodServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProdServerClient(cc grpc.ClientConnInterface) ProdServerClient {
	return &prodServerClient{cc}
}

func (c *prodServerClient) GetProd(ctx context.Context, in *ProdRequest, opts ...grpc.CallOption) (*ProdResponse, error) {
	out := new(ProdResponse)
	err := c.cc.Invoke(ctx, "/ProdServer/GetProd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProdServerServer is the server API for ProdServer service.
// All implementations must embed UnimplementedProdServerServer
// for forward compatibility
type ProdServerServer interface {
	GetProd(context.Context, *ProdRequest) (*ProdResponse, error)
	mustEmbedUnimplementedProdServerServer()
}

// UnimplementedProdServerServer must be embedded to have forward compatible implementations.
type UnimplementedProdServerServer struct {
}

func (UnimplementedProdServerServer) GetProd(context.Context, *ProdRequest) (*ProdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProd not implemented")
}
func (UnimplementedProdServerServer) mustEmbedUnimplementedProdServerServer() {}

// UnsafeProdServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProdServerServer will
// result in compilation errors.
type UnsafeProdServerServer interface {
	mustEmbedUnimplementedProdServerServer()
}

func RegisterProdServerServer(s grpc.ServiceRegistrar, srv ProdServerServer) {
	s.RegisterService(&ProdServer_ServiceDesc, srv)
}

func _ProdServer_GetProd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdServerServer).GetProd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProdServer/GetProd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdServerServer).GetProd(ctx, req.(*ProdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProdServer_ServiceDesc is the grpc.ServiceDesc for ProdServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProdServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProdServer",
	HandlerType: (*ProdServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProd",
			Handler:    _ProdServer_GetProd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
